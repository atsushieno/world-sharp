// This source file is generated by nclang PInvokeGenerator.
using System;
using System.Runtime.InteropServices;
using CheapTrickOption = WorldSharp.Interop.CheapTrickOption;
using fft_complex = System.IntPtr/*System.Double[]*/;
using fft_plan = WorldSharp.Interop.fft_plan;
using ForwardRealFFT = WorldSharp.Interop.ForwardRealFFT;
using InverseRealFFT = WorldSharp.Interop.InverseRealFFT;
using InverseComplexFFT = WorldSharp.Interop.InverseComplexFFT;
using MinimumPhaseAnalysis = WorldSharp.Interop.MinimumPhaseAnalysis;
using D4COption = WorldSharp.Interop.D4COption;
using DioOption = WorldSharp.Interop.DioOption;
using HarvestOption = WorldSharp.Interop.HarvestOption;
using WorldSynthesizer = WorldSharp.Interop.WorldSynthesizer;

namespace WorldSharp.Interop {
[StructLayout (LayoutKind.Sequential)]
struct CheapTrickOption // cheaptrick.h (16, 9)
{
	public System.Double @q1;
	public System.Double @f0_floor;
	public System.Int32 @fft_size;
}

[StructLayout (LayoutKind.Sequential)]
struct D4COption // d4c.h (16, 9)
{
	public System.Double @threshold;
}

[StructLayout (LayoutKind.Sequential)]
struct DioOption // dio.h (16, 9)
{
	public System.Double @f0_floor;
	public System.Double @f0_ceil;
	public System.Double @channels_in_octave;
	public System.Double @frame_period;
	public System.Int32 @speed;
	public System.Double @allowed_range;
}

[StructLayout (LayoutKind.Sequential)]
struct HarvestOption // harvest.h (16, 9)
{
	public System.Double @f0_floor;
	public System.Double @f0_ceil;
	public System.Double @frame_period;
}

[StructLayout (LayoutKind.Sequential)]
struct fft_plan // fft.h (24, 9)
{
	public System.Int32 @n;
	public System.Int32 @sign;
	public System.UInt32 @flags;
	[CTypeDetails ("Pointer<System.IntPtr/*System.Double[]*/>")]public System.IntPtr @c_in;
	[CTypeDetails ("Pointer<System.Double>")]public System.IntPtr @in;
	[CTypeDetails ("Pointer<System.IntPtr/*System.Double[]*/>")]public System.IntPtr @c_out;
	[CTypeDetails ("Pointer<System.Double>")]public System.IntPtr @out;
	[CTypeDetails ("Pointer<System.Double>")]public System.IntPtr @input;
	[CTypeDetails ("Pointer<System.Int32>")]public System.IntPtr @ip;
	[CTypeDetails ("Pointer<System.Double>")]public System.IntPtr @w;
}

[StructLayout (LayoutKind.Sequential)]
struct ForwardRealFFT // common.h (18, 9)
{
	public System.Int32 @fft_size;
	[CTypeDetails ("Pointer<System.Double>")]public System.IntPtr @waveform;
	[CTypeDetails ("Pointer<System.IntPtr/*System.Double[]*/>")]public System.IntPtr @spectrum;
	public WorldSharp.Interop.fft_plan @forward_fft;
}

[StructLayout (LayoutKind.Sequential)]
struct InverseRealFFT // common.h (26, 9)
{
	public System.Int32 @fft_size;
	[CTypeDetails ("Pointer<System.Double>")]public System.IntPtr @waveform;
	[CTypeDetails ("Pointer<System.IntPtr/*System.Double[]*/>")]public System.IntPtr @spectrum;
	public WorldSharp.Interop.fft_plan @inverse_fft;
}

[StructLayout (LayoutKind.Sequential)]
struct InverseComplexFFT // common.h (34, 9)
{
	public System.Int32 @fft_size;
	[CTypeDetails ("Pointer<System.IntPtr/*System.Double[]*/>")]public System.IntPtr @input;
	[CTypeDetails ("Pointer<System.IntPtr/*System.Double[]*/>")]public System.IntPtr @output;
	public WorldSharp.Interop.fft_plan @inverse_fft;
}

[StructLayout (LayoutKind.Sequential)]
struct MinimumPhaseAnalysis // common.h (42, 9)
{
	public System.Int32 @fft_size;
	[CTypeDetails ("Pointer<System.Double>")]public System.IntPtr @log_spectrum;
	[CTypeDetails ("Pointer<System.IntPtr/*System.Double[]*/>")]public System.IntPtr @minimum_phase_spectrum;
	[CTypeDetails ("Pointer<System.IntPtr/*System.Double[]*/>")]public System.IntPtr @cepstrum;
	public WorldSharp.Interop.fft_plan @inverse_fft;
	public WorldSharp.Interop.fft_plan @forward_fft;
}

[StructLayout (LayoutKind.Sequential)]
struct WorldSynthesizer // synthesisrealtime.h (20, 9)
{
	public System.Int32 @fs;
	public System.Double @frame_period;
	public System.Int32 @buffer_size;
	public System.Int32 @number_of_pointers;
	public System.Int32 @fft_size;
	[CTypeDetails ("Pointer<System.Double>")]public System.IntPtr @buffer;
	public System.Int32 @current_pointer;
	public System.Int32 @i;
	[CTypeDetails ("Pointer<System.Double>")]public System.IntPtr @dc_remover;
	[CTypeDetails ("Pointer<System.Int32>")]public System.IntPtr @f0_length;
	[CTypeDetails ("Pointer<System.Int32>")]public System.IntPtr @f0_origin;
	[CTypeDetails ("Pointer<System.IntPtr>")]public System.IntPtr @spectrogram;
	[CTypeDetails ("Pointer<System.IntPtr>")]public System.IntPtr @aperiodicity;
	public System.Int32 @current_pointer2;
	public System.Int32 @head_pointer;
	public System.Int32 @synthesized_sample;
	public System.Int32 @handoff;
	public System.Double @handoff_phase;
	public System.Double @handoff_f0;
	public System.Int32 @last_location;
	public System.Int32 @cumulative_frame;
	public System.Int32 @current_frame;
	[CTypeDetails ("Pointer<System.IntPtr>")]public System.IntPtr @interpolated_vuv;
	[CTypeDetails ("Pointer<System.IntPtr>")]public System.IntPtr @pulse_locations;
	[CTypeDetails ("Pointer<System.IntPtr>")]public System.IntPtr @pulse_locations_index;
	[CTypeDetails ("Pointer<System.Int32>")]public System.IntPtr @number_of_pulses;
	[CTypeDetails ("Pointer<System.Double>")]public System.IntPtr @impulse_response;
	public WorldSharp.Interop.MinimumPhaseAnalysis @minimum_phase;
	public WorldSharp.Interop.InverseRealFFT @inverse_real_fft;
	public WorldSharp.Interop.ForwardRealFFT @forward_real_fft;
}

partial class Natives
{
	const string LibraryName = "World";
	// function CheapTrick - cheaptrick.h (38, 6)
	[DllImport (LibraryName)]
	internal static extern void CheapTrick ([CTypeDetails ("Pointer<double>")]System.IntPtr @x, int @x_length, int @fs, [CTypeDetails ("Pointer<double>")]System.IntPtr @temporal_positions, [CTypeDetails ("Pointer<double>")]System.IntPtr @f0, int @f0_length, [CTypeDetails ("Pointer<CheapTrickOption>")]System.IntPtr @option, [CTypeDetails ("Pointer<System.IntPtr>")]System.IntPtr @spectrogram);

	// function InitializeCheapTrickOption - cheaptrick.h (52, 6)
	[DllImport (LibraryName)]
	internal static extern void InitializeCheapTrickOption (int @fs, [CTypeDetails ("Pointer<CheapTrickOption>")]System.IntPtr @option);

	// function GetFFTSizeForCheapTrick - cheaptrick.h (65, 5)
	[DllImport (LibraryName)]
	internal static extern int GetFFTSizeForCheapTrick (int @fs, [CTypeDetails ("Pointer<CheapTrickOption>")]System.IntPtr @option);

	// function GetF0FloorForCheapTrick - cheaptrick.h (80, 8)
	[DllImport (LibraryName)]
	internal static extern double GetF0FloorForCheapTrick (int @fs, int @fft_size);

	// function GetNumberOfAperiodicities - codec.h (23, 5)
	[DllImport (LibraryName)]
	internal static extern int GetNumberOfAperiodicities (int @fs);

	// function CodeAperiodicity - codec.h (38, 6)
	[DllImport (LibraryName)]
	internal static extern void CodeAperiodicity ([CTypeDetails ("Pointer<System.IntPtr>")]System.IntPtr @aperiodicity, int @f0_length, int @fs, int @fft_size, [CTypeDetails ("Pointer<System.IntPtr>")]System.IntPtr @coded_aperiodicity);

	// function DecodeAperiodicity - codec.h (53, 6)
	[DllImport (LibraryName)]
	internal static extern void DecodeAperiodicity ([CTypeDetails ("Pointer<System.IntPtr>")]System.IntPtr @coded_aperiodicity, int @f0_length, int @fs, int @fft_size, [CTypeDetails ("Pointer<System.IntPtr>")]System.IntPtr @aperiodicity);

	// function CodeSpectralEnvelope - codec.h (69, 6)
	[DllImport (LibraryName)]
	internal static extern void CodeSpectralEnvelope ([CTypeDetails ("Pointer<System.IntPtr>")]System.IntPtr @spectrogram, int @f0_length, int @fs, int @fft_size, int @number_of_dimensions, [CTypeDetails ("Pointer<System.IntPtr>")]System.IntPtr @coded_spectral_envelope);

	// function DecodeSpectralEnvelope - codec.h (86, 6)
	[DllImport (LibraryName)]
	internal static extern void DecodeSpectralEnvelope ([CTypeDetails ("Pointer<System.IntPtr>")]System.IntPtr @coded_spectral_envelope, int @f0_length, int @fs, int @fft_size, int @number_of_dimensions, [CTypeDetails ("Pointer<System.IntPtr>")]System.IntPtr @spectrogram);

	// function D4C - d4c.h (35, 6)
	[DllImport (LibraryName)]
	internal static extern void D4C ([CTypeDetails ("Pointer<double>")]System.IntPtr @x, int @x_length, int @fs, [CTypeDetails ("Pointer<double>")]System.IntPtr @temporal_positions, [CTypeDetails ("Pointer<double>")]System.IntPtr @f0, int @f0_length, int @fft_size, [CTypeDetails ("Pointer<D4COption>")]System.IntPtr @option, [CTypeDetails ("Pointer<System.IntPtr>")]System.IntPtr @aperiodicity);

	// function InitializeD4COption - d4c.h (46, 6)
	[DllImport (LibraryName)]
	internal static extern void InitializeD4COption ([CTypeDetails ("Pointer<D4COption>")]System.IntPtr @option);

	// function Dio - dio.h (38, 6)
	[DllImport (LibraryName)]
	internal static extern void Dio ([CTypeDetails ("Pointer<double>")]System.IntPtr @x, int @x_length, int @fs, [CTypeDetails ("Pointer<DioOption>")]System.IntPtr @option, [CTypeDetails ("Pointer<double>")]System.IntPtr @temporal_positions, [CTypeDetails ("Pointer<double>")]System.IntPtr @f0);

	// function InitializeDioOption - dio.h (48, 6)
	[DllImport (LibraryName)]
	internal static extern void InitializeDioOption ([CTypeDetails ("Pointer<DioOption>")]System.IntPtr @option);

	// function GetSamplesForDIO - dio.h (61, 5)
	[DllImport (LibraryName)]
	internal static extern int GetSamplesForDIO (int @fs, int @x_length, double @frame_period);

	// function Harvest - harvest.h (35, 6)
	[DllImport (LibraryName)]
	internal static extern void Harvest ([CTypeDetails ("Pointer<double>")]System.IntPtr @x, int @x_length, int @fs, [CTypeDetails ("Pointer<HarvestOption>")]System.IntPtr @option, [CTypeDetails ("Pointer<double>")]System.IntPtr @temporal_positions, [CTypeDetails ("Pointer<double>")]System.IntPtr @f0);

	// function InitializeHarvestOption - harvest.h (45, 6)
	[DllImport (LibraryName)]
	internal static extern void InitializeHarvestOption ([CTypeDetails ("Pointer<HarvestOption>")]System.IntPtr @option);

	// function GetSamplesForHarvest - harvest.h (59, 5)
	[DllImport (LibraryName)]
	internal static extern int GetSamplesForHarvest (int @fs, int @x_length, double @frame_period);

	// function fftshift - matlabfunctions.h (28, 6)
	[DllImport (LibraryName)]
	internal static extern void fftshift ([CTypeDetails ("Pointer<double>")]System.IntPtr @x, int @x_length, [CTypeDetails ("Pointer<double>")]System.IntPtr @y);

	// function histc - matlabfunctions.h (48, 6)
	[DllImport (LibraryName)]
	internal static extern void histc ([CTypeDetails ("Pointer<double>")]System.IntPtr @x, int @x_length, [CTypeDetails ("Pointer<double>")]System.IntPtr @edges, int @edges_length, [CTypeDetails ("Pointer<int>")]System.IntPtr @index);

	// function interp1 - matlabfunctions.h (66, 6)
	[DllImport (LibraryName)]
	internal static extern void interp1 ([CTypeDetails ("Pointer<double>")]System.IntPtr @x, [CTypeDetails ("Pointer<double>")]System.IntPtr @y, int @x_length, [CTypeDetails ("Pointer<double>")]System.IntPtr @xi, int @xi_length, [CTypeDetails ("Pointer<double>")]System.IntPtr @yi);

	// function decimate - matlabfunctions.h (81, 6)
	[DllImport (LibraryName)]
	internal static extern void decimate ([CTypeDetails ("Pointer<double>")]System.IntPtr @x, int @x_length, int @r, [CTypeDetails ("Pointer<double>")]System.IntPtr @y);

	// function matlab_round - matlabfunctions.h (92, 5)
	[DllImport (LibraryName)]
	internal static extern int matlab_round (double @x);

	// function diff - matlabfunctions.h (105, 6)
	[DllImport (LibraryName)]
	internal static extern void diff ([CTypeDetails ("Pointer<double>")]System.IntPtr @x, int @x_length, [CTypeDetails ("Pointer<double>")]System.IntPtr @y);

	// function interp1Q - matlabfunctions.h (125, 6)
	[DllImport (LibraryName)]
	internal static extern void interp1Q (double @x, double @shift, [CTypeDetails ("Pointer<double>")]System.IntPtr @y, int @x_length, [CTypeDetails ("Pointer<double>")]System.IntPtr @xi, int @xi_length, [CTypeDetails ("Pointer<double>")]System.IntPtr @yi);

	// function randn - matlabfunctions.h (134, 8)
	[DllImport (LibraryName)]
	internal static extern double randn ();

	// function fast_fftfilt - matlabfunctions.h (151, 6)
	[DllImport (LibraryName)]
	internal static extern void fast_fftfilt ([CTypeDetails ("Pointer<double>")]System.IntPtr @x, int @x_length, [CTypeDetails ("Pointer<double>")]System.IntPtr @h, int @h_length, int @fft_size, [CTypeDetails ("Pointer<ForwardRealFFT>")]System.IntPtr @forward_real_fft, [CTypeDetails ("Pointer<InverseRealFFT>")]System.IntPtr @inverse_real_fft, [CTypeDetails ("Pointer<double>")]System.IntPtr @y);

	// function matlab_std - matlabfunctions.h (165, 8)
	[DllImport (LibraryName)]
	internal static extern double matlab_std ([CTypeDetails ("Pointer<double>")]System.IntPtr @x, int @x_length);

	// function StoneMask - stonemask.h (27, 6)
	[DllImport (LibraryName)]
	internal static extern void StoneMask ([CTypeDetails ("Pointer<double>")]System.IntPtr @x, int @x_length, int @fs, [CTypeDetails ("Pointer<double>")]System.IntPtr @temporal_positions, [CTypeDetails ("Pointer<double>")]System.IntPtr @f0, int @f0_length, [CTypeDetails ("Pointer<double>")]System.IntPtr @refined_f0);

	// function Synthesis - synthesis.h (30, 6)
	[DllImport (LibraryName)]
	internal static extern void Synthesis ([CTypeDetails ("Pointer<double>")]System.IntPtr @f0, int @f0_length, [CTypeDetails ("Pointer<System.IntPtr>")]System.IntPtr @spectrogram, [CTypeDetails ("Pointer<System.IntPtr>")]System.IntPtr @aperiodicity, int @fft_size, double @frame_period, int @fs, int @y_length, [CTypeDetails ("Pointer<double>")]System.IntPtr @y);

	// function fft_plan_dft_1d - fft.h (37, 10)
	[DllImport (LibraryName)]
	internal static extern fft_plan fft_plan_dft_1d (int @n, [CTypeDetails ("Pointer<fft_complex>")]System.IntPtr @in, [CTypeDetails ("Pointer<fft_complex>")]System.IntPtr @out, int @sign, uint @flags);

	// function fft_plan_dft_c2r_1d - fft.h (39, 10)
	[DllImport (LibraryName)]
	internal static extern fft_plan fft_plan_dft_c2r_1d (int @n, [CTypeDetails ("Pointer<fft_complex>")]System.IntPtr @in, [CTypeDetails ("Pointer<double>")]System.IntPtr @out, uint @flags);

	// function fft_plan_dft_r2c_1d - fft.h (41, 10)
	[DllImport (LibraryName)]
	internal static extern fft_plan fft_plan_dft_r2c_1d (int @n, [CTypeDetails ("Pointer<double>")]System.IntPtr @in, [CTypeDetails ("Pointer<fft_complex>")]System.IntPtr @out, uint @flags);

	// function fft_execute - fft.h (43, 6)
	[DllImport (LibraryName)]
	internal static extern void fft_execute (fft_plan @p);

	// function fft_destroy_plan - fft.h (44, 6)
	[DllImport (LibraryName)]
	internal static extern void fft_destroy_plan (fft_plan @p);

	// function GetSuitableFFTSize - common.h (62, 5)
	[DllImport (LibraryName)]
	internal static extern int GetSuitableFFTSize (int @sample);

	// function MyMaxInt - common.h (68, 12)
	[DllImport (LibraryName)]
	internal static extern int MyMaxInt (int @x, int @y);

	// function MyMaxDouble - common.h (72, 15)
	[DllImport (LibraryName)]
	internal static extern double MyMaxDouble (double @x, double @y);

	// function MyMinInt - common.h (76, 12)
	[DllImport (LibraryName)]
	internal static extern int MyMinInt (int @x, int @y);

	// function MyMinDouble - common.h (80, 15)
	[DllImport (LibraryName)]
	internal static extern double MyMinDouble (double @x, double @y);

	// function DCCorrection - common.h (91, 6)
	[DllImport (LibraryName)]
	internal static extern void DCCorrection ([CTypeDetails ("Pointer<double>")]System.IntPtr @input, double @current_f0, int @fs, int @fft_size, [CTypeDetails ("Pointer<double>")]System.IntPtr @output);

	// function LinearSmoothing - common.h (98, 6)
	[DllImport (LibraryName)]
	internal static extern void LinearSmoothing ([CTypeDetails ("Pointer<double>")]System.IntPtr @input, double @width, int @fs, int @fft_size, [CTypeDetails ("Pointer<double>")]System.IntPtr @output);

	// function NuttallWindow - common.h (105, 6)
	[DllImport (LibraryName)]
	internal static extern void NuttallWindow (int @y_length, [CTypeDetails ("Pointer<double>")]System.IntPtr @y);

	// function GetSafeAperiodicity - common.h (111, 15)
	[DllImport (LibraryName)]
	internal static extern double GetSafeAperiodicity (double @x);

	// function InitializeForwardRealFFT - common.h (118, 6)
	[DllImport (LibraryName)]
	internal static extern void InitializeForwardRealFFT (int @fft_size, [CTypeDetails ("Pointer<ForwardRealFFT>")]System.IntPtr @forward_real_fft);

	// function DestroyForwardRealFFT - common.h (119, 6)
	[DllImport (LibraryName)]
	internal static extern void DestroyForwardRealFFT ([CTypeDetails ("Pointer<ForwardRealFFT>")]System.IntPtr @forward_real_fft);

	// function InitializeInverseRealFFT - common.h (122, 6)
	[DllImport (LibraryName)]
	internal static extern void InitializeInverseRealFFT (int @fft_size, [CTypeDetails ("Pointer<InverseRealFFT>")]System.IntPtr @inverse_real_fft);

	// function DestroyInverseRealFFT - common.h (123, 6)
	[DllImport (LibraryName)]
	internal static extern void DestroyInverseRealFFT ([CTypeDetails ("Pointer<InverseRealFFT>")]System.IntPtr @inverse_real_fft);

	// function InitializeInverseComplexFFT - common.h (126, 6)
	[DllImport (LibraryName)]
	internal static extern void InitializeInverseComplexFFT (int @fft_size, [CTypeDetails ("Pointer<InverseComplexFFT>")]System.IntPtr @inverse_complex_fft);

	// function DestroyInverseComplexFFT - common.h (128, 6)
	[DllImport (LibraryName)]
	internal static extern void DestroyInverseComplexFFT ([CTypeDetails ("Pointer<InverseComplexFFT>")]System.IntPtr @inverse_complex_fft);

	// function InitializeMinimumPhaseAnalysis - common.h (131, 6)
	[DllImport (LibraryName)]
	internal static extern void InitializeMinimumPhaseAnalysis (int @fft_size, [CTypeDetails ("Pointer<MinimumPhaseAnalysis>")]System.IntPtr @minimum_phase);

	// function GetMinimumPhaseSpectrum - common.h (133, 6)
	[DllImport (LibraryName)]
	internal static extern void GetMinimumPhaseSpectrum ([CTypeDetails ("Pointer<MinimumPhaseAnalysis>")]System.IntPtr @minimum_phase);

	// function DestroyMinimumPhaseAnalysis - common.h (134, 6)
	[DllImport (LibraryName)]
	internal static extern void DestroyMinimumPhaseAnalysis ([CTypeDetails ("Pointer<MinimumPhaseAnalysis>")]System.IntPtr @minimum_phase);

	// function InitializeSynthesizer - synthesisrealtime.h (90, 6)
	[DllImport (LibraryName)]
	internal static extern void InitializeSynthesizer (int @fs, double @frame_period, int @fft_size, int @buffer_size, int @number_of_pointers, [CTypeDetails ("Pointer<WorldSynthesizer>")]System.IntPtr @synth);

	// function AddParameters - synthesisrealtime.h (109, 5)
	[DllImport (LibraryName)]
	internal static extern int AddParameters ([CTypeDetails ("Pointer<double>")]System.IntPtr @f0, int @f0_length, [CTypeDetails ("Pointer<System.IntPtr>")]System.IntPtr @spectrogram, [CTypeDetails ("Pointer<System.IntPtr>")]System.IntPtr @aperiodicity, [CTypeDetails ("Pointer<WorldSynthesizer>")]System.IntPtr @synth);

	// function RefreshSynthesizer - synthesisrealtime.h (115, 6)
	[DllImport (LibraryName)]
	internal static extern void RefreshSynthesizer ([CTypeDetails ("Pointer<WorldSynthesizer>")]System.IntPtr @synth);

	// function DestroySynthesizer - synthesisrealtime.h (120, 6)
	[DllImport (LibraryName)]
	internal static extern void DestroySynthesizer ([CTypeDetails ("Pointer<WorldSynthesizer>")]System.IntPtr @synth);

	// function IsLocked - synthesisrealtime.h (136, 5)
	[DllImport (LibraryName)]
	internal static extern int IsLocked ([CTypeDetails ("Pointer<WorldSynthesizer>")]System.IntPtr @synth);

	// function Synthesis2 - synthesisrealtime.h (148, 5)
	[DllImport (LibraryName)]
	internal static extern int Synthesis2 ([CTypeDetails ("Pointer<WorldSynthesizer>")]System.IntPtr @synth);

}


public struct Pointer<T>
{
	public IntPtr Handle;
	public static implicit operator IntPtr (Pointer<T> value) { return value.Handle; }
	public static implicit operator Pointer<T> (IntPtr value) { return new Pointer<T> (value); }

	public Pointer (IntPtr handle)
	{
		Handle = handle;
	}

	public override bool Equals (object obj)
	{
		return obj is Pointer<T> && this == (Pointer<T>) obj;
	}

	public override int GetHashCode ()
	{
		return (int) Handle;
	}

	public static bool operator == (Pointer<T> p1, Pointer<T> p2)
	{
		return p1.Handle == p2.Handle;
	}

	public static bool operator != (Pointer<T> p1, Pointer<T> p2)
	{
		return p1.Handle != p2.Handle;
	}
}
public struct ArrayOf<T> {}
public struct ConstArrayOf<T> {}
public class CTypeDetailsAttribute : Attribute
{
	public CTypeDetailsAttribute (string value)
	{
		Value = value;
	}

	public string Value { get; set; }
}

}
